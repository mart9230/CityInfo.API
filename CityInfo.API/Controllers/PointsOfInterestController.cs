using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using AutoMapper;
using CityInfo.API.Models;
using CityInfo.API.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace CityInfo.API.Controllers
{
    [Route("api/cities")]
    [ApiController]
    public class PointsOfInterestController : ControllerBase
    {
        private ILogger<PointsOfInterestController> _logger;
        private IMailService _mailService;
        private ICityInfoRepository _cityInfoRepository;
        
        public PointsOfInterestController(ILogger<PointsOfInterestController> logger, IMailService mailService, ICityInfoRepository cityInfoRepository)
        {
            _logger = logger;
            _mailService = mailService;
            _cityInfoRepository = cityInfoRepository;
        }


        // GET: api/PointsOfInterest
        [HttpGet("{cityId}/pointsofinterest")]
        public IActionResult GetPointsOfInterest(int cityId)
        {
            try
            {
                if (!_cityInfoRepository.CityExists(cityId))
                {
                    _logger.LogInformation($"City with id: {cityId} wasn't found.");
                    return NotFound();
                }

                var pointsOfInterestEntity = _cityInfoRepository.GetPointsOfInterestForCity(cityId);

                var pointsOfInterestDto = Mapper.Map<IEnumerable<PointOfInterestDto>> (pointsOfInterestEntity); 

                return Ok(pointsOfInterestDto);
            }
            catch(Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(Convert.ToInt32(HttpStatusCode.InternalServerError));
            }
        }

        // GET: api/PointsOfInterest/5
        [HttpGet("{cityId}/pointsofinterest/{id}", Name = "GetPointOfInterest")]
        public IActionResult GetPointOfInterest(int cityId, int id)
        {
            try
            {
                if (!_cityInfoRepository.CityExists(cityId))
                {
                    _logger.LogInformation($"City with id: {cityId} wasn't found.");
                    return NotFound();
                }

                var pointOfInterestEntity = _cityInfoRepository.GetPointOfInterestForCity(cityId, id);

                if (pointOfInterestEntity == null)
                {
                    return NotFound();
                }

                var pointOfInterestDto = Mapper.Map<PointOfInterestDto>(pointOfInterestEntity);

                return Ok(pointOfInterestDto);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(Convert.ToInt32(HttpStatusCode.InternalServerError));
            }
        }

        // POST: api/PointsOfInterest
        [HttpPost("{cityId}/pointsofinterest")]
        public IActionResult CreatePointOfInterest(int cityId, [FromBody] PointOfInterestForCreationDto pointOfInterest)
        {
            try
            {
                if (pointOfInterest == null)
                {
                    return BadRequest();
                }

                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                if (!_cityInfoRepository.CityExists(cityId))
                {
                    return NotFound();
                }

                var pointOfInterestEntity = Mapper.Map<Entities.PointOfInterest>(pointOfInterest);

                _cityInfoRepository.AddPointOfInterestToCity(cityId, pointOfInterestEntity);
                _cityInfoRepository.Save();

                var pointOfInterestDto = Mapper.Map<Models.PointOfInterestDto>(pointOfInterestEntity);

                // after method .Save() is call, the pointOfInterestEntity will have its autogenerated id filled out.
                return CreatedAtRoute("GetPointOfInterest", new { cityId = cityId, id = pointOfInterestEntity.Id }, pointOfInterestDto);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(Convert.ToInt32(HttpStatusCode.InternalServerError));
            }
        }

        // PUT: api/PointsOfInterest/5
        [HttpPut("{cityId}/pointsofinterest/{id}")]
        public IActionResult UpdatePointOfInterest(int cityId, int id, [FromBody] PointOfInterestForUpdateDto pointOfInterest)
        {
            try
            {
                if (pointOfInterest == null)
                {
                    return BadRequest();
                }

                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                if (!_cityInfoRepository.CityExists(cityId))
                {
                    return NotFound();
                }

                var pointOfInterestEntity = _cityInfoRepository.GetPointOfInterestForCity(cityId, id);

                if (pointOfInterestEntity == null)
                {
                    return NotFound();
                }

                // override the values from dto into entity object.
                Mapper.Map(pointOfInterest, pointOfInterestEntity);

                // pointOfInterestEntity is being tracked by the db context, and now has a modified state.
                // all we have to do is call save, and the changes will be persisted to the DB.
                _cityInfoRepository.Save();

                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(Convert.ToInt32(HttpStatusCode.InternalServerError));
            }
        }

        [HttpPatch("{cityId}/pointsofinterest/{id}")]
        public IActionResult PartialUpdatePointOfInterest(int cityId, int id, [FromBody] JsonPatchDocument<PointOfInterestForUpdateDto> patchDoc)
        {
            try
            {
                if (patchDoc == null)
                {
                    return BadRequest();
                }

                if (!_cityInfoRepository.CityExists(cityId))
                {
                    return NotFound();
                }

                var pointOfInterestEntity = _cityInfoRepository.GetPointOfInterestForCity(cityId, id);

                if (pointOfInterestEntity == null)
                {
                    return NotFound();
                }

                var pointOfInterestToPatch = Mapper.Map<PointOfInterestForUpdateDto>(pointOfInterestEntity);

                patchDoc.ApplyTo(pointOfInterestToPatch, ModelState);

                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                TryValidateModel(pointOfInterestToPatch);

                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                // override the values from dto into entity object.
                Mapper.Map(pointOfInterestToPatch, pointOfInterestEntity);

                // pointOfInterestEntity is being tracked by the db context, and now has a modified state.
                // all we have to do is call save, and the changes will be persisted to the DB.
                _cityInfoRepository.Save();

                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(Convert.ToInt32(HttpStatusCode.InternalServerError));
            }
        }

        // DELETE: api/ApiWithActions/5
        [HttpDelete("{cityId}/pointsofinterest/{id}")]
        public IActionResult DeletePointOfInterest(int cityId, int id)
        {
            try
            {
                if (!_cityInfoRepository.CityExists(cityId))
                {
                    return NotFound();
                }

                var pointOfInterestEntity = _cityInfoRepository.GetPointOfInterestForCity(cityId, id);

                if (pointOfInterestEntity == null)
                {
                    return NotFound();
                }

                _cityInfoRepository.DeletePointOfInterestForCity(pointOfInterestEntity);
                if (_cityInfoRepository.Save())
                {
                    _mailService.Send("PointOfInterest Deleted", $"PointOfInterest: {pointOfInterestEntity.Name} has been deleted.");
                }

                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(Convert.ToInt32(HttpStatusCode.InternalServerError));
            }
        }
    }
}
